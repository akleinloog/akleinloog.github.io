<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kubernetes | My Site</title><link>https://www.kleinloog.ch/tag/kubernetes/</link><atom:link href="https://www.kleinloog.ch/tag/kubernetes/index.xml" rel="self" type="application/rss+xml"/><description>Kubernetes</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Dedicated to the public domain · [Unlicensed](https://github.com/akleinloog/akleinloog.github.io/blob/master/LICENSE)</copyright><lastBuildDate>Sat, 13 Feb 2021 00:00:00 +0000</lastBuildDate><image><url>https://www.kleinloog.ch/images/icon_hu1d96926d990b8c2ce1741b9516caf288_71361_512x512_fill_lanczos_center_3.png</url><title>Kubernetes</title><link>https://www.kleinloog.ch/tag/kubernetes/</link></image><item><title>MicroK8s - Kubernetes for developers</title><link>https://www.kleinloog.ch/post/microk8s-kubernetes/</link><pubDate>Sat, 13 Feb 2021 00:00:00 +0000</pubDate><guid>https://www.kleinloog.ch/post/microk8s-kubernetes/</guid><description>&lt;p>Following my initial post on &lt;a href="https://www.kleinloog.ch/post/which-local-kubernetes">local Kubernetes options&lt;/a> and a deep dive on &lt;a href="https://www.kleinloog.ch/post/minikube-kubernetes">Minikube&lt;/a> it is time to take &lt;a href="https://microk8s.io" target="_blank" rel="noopener">MicroK8s&lt;/a> for a spin.
I have been looking forward to this for a while, so let&amp;rsquo;s get started.&lt;/p>
&lt;h3 id="preparation">Preparation&lt;/h3>
&lt;p>First things first, as always, I want my MacBook up to date.
At the time of writing, it runs macOS Big Sur version 11.2.1 and Xcode version 12.4.
Time to update the rest:&lt;/p>
&lt;pre>&lt;code class="language-bash">brew update
brew upgrade
brew upgrade --cask
&lt;/code>&lt;/pre>
&lt;p>In addition, make sure there are no issues. If there are, resolve them first:&lt;/p>
&lt;pre>&lt;code class="language-bash">brew doctor
&lt;/code>&lt;/pre>
&lt;p>Should give the following output when all is ready:&lt;/p>
&lt;pre>&lt;code class="language-bash">Your system is ready to brew.
&lt;/code>&lt;/pre>
&lt;p>Should you run into any issues, I recommend to fix these first. Google is your friend&amp;hellip;&lt;/p>
&lt;p>If you are running windows, &lt;a href="https://chocolatey.org/" target="_blank" rel="noopener">chocolatey&lt;/a> is a decent alternative to brew.&lt;/p>
&lt;h3 id="install-multipass">Install Multipass&lt;/h3>
&lt;p>&lt;a href="https://multipass.run" target="_blank" rel="noopener">Multipass&lt;/a> makes it easy to work with Ubuntu VMs on a Mac or Windows workstation.
Install it using:&lt;/p>
&lt;pre>&lt;code class="language-bash">brew install --cask multipass
&lt;/code>&lt;/pre>
&lt;p>After a little while, the installation completes:&lt;/p>
&lt;pre>&lt;code class="language-plaintext">🍺 multipass was successfully installed!
&lt;/code>&lt;/pre>
&lt;p>For more info on Multipass, check the &lt;a href="https://multipass.run/docs" target="_blank" rel="noopener">docs&lt;/a>.&lt;/p>
&lt;h3 id="create-an-ubuntu-vm">Create an Ubuntu VM&lt;/h3>
&lt;p>TIme to create an Ubuntu VM to install MicroK8s on. Let&amp;rsquo;s give it some resources as well.&lt;/p>
&lt;pre>&lt;code class="language-bash">multipass launch --name k8s-master --cpus 4 --mem 16G --disk 50G
&lt;/code>&lt;/pre>
&lt;p>After a little while, a new VM is created:&lt;/p>
&lt;pre>&lt;code class="language-plaintext">Launched: k8s-master
&lt;/code>&lt;/pre>
&lt;p>Open a shell into our new VM&lt;/p>
&lt;pre>&lt;code class="language-bash">multipass shell k8s-master
&lt;/code>&lt;/pre>
&lt;p>And make sure it is up to date:&lt;/p>
&lt;pre>&lt;code class="language-bash">sudo su
apt update
apt upgrade
&lt;/code>&lt;/pre>
&lt;h3 id="install-microk8s">Install MicroK8s&lt;/h3>
&lt;p>Time to install MicroK8s:&lt;/p>
&lt;pre>&lt;code class="language-bash">sudo snap install microk8s --classic --channel=1.19/stable
&lt;/code>&lt;/pre>
&lt;p>And make sure the networking runs smoothly:&lt;/p>
&lt;pre>&lt;code class="language-bash">sudo iptables -P FORWARD ACCEPT
&lt;/code>&lt;/pre>
&lt;p>MicroK8s creates a group to enable seamless usage of commands which require admin privilege. Add your user to this group:&lt;/p>
&lt;pre>&lt;code class="language-bash">sudo usermod -a -G microk8s $USER
sudo chown -f -R $USER ~/.kube
&lt;/code>&lt;/pre>
&lt;p>Re-enter the session so the group update takes place:&lt;/p>
&lt;pre>&lt;code class="language-bash">su - $USER
&lt;/code>&lt;/pre>
&lt;p>Make sure that the cluster was created successfully:&lt;/p>
&lt;pre>&lt;code class="language-bash">microk8s status --wait-ready
&lt;/code>&lt;/pre>
&lt;p>Create an alias for kubectl:&lt;/p>
&lt;pre>&lt;code class="language-bash">alias kubectl='microk8s kubectl'
&lt;/code>&lt;/pre>
&lt;p>For more info on MicroK8s, check the &lt;a href="https://microk8s.io/docs" target="_blank" rel="noopener">docs&lt;/a>.&lt;/p>
&lt;h3 id="first-deployment">First deployment&lt;/h3>
&lt;p>Deploy a simple application:&lt;/p>
&lt;pre>&lt;code class="language-bash">kubectl create deployment hello --image=akleinloog/hello:v1
&lt;/code>&lt;/pre>
&lt;p>Verify that the pod is up and running:&lt;/p>
&lt;pre>&lt;code class="language-bash">kubectl get pods
&lt;/code>&lt;/pre>
&lt;p>And expose it:&lt;/p>
&lt;pre>&lt;code class="language-bash">kubectl expose deployment hello --port=80 --type=NodePort
&lt;/code>&lt;/pre>
&lt;p>See at which port it is available:&lt;/p>
&lt;pre>&lt;code class="language-bash">kubectl get services
&lt;/code>&lt;/pre>
&lt;p>This should give a response similar to:&lt;/p>
&lt;pre>&lt;code class="language-bash">NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE
kubernetes ClusterIP 10.152.183.1 &amp;lt;none&amp;gt; 443/TCP 15m
hello NodePort 10.152.183.70 &amp;lt;none&amp;gt; 80:31984/TCP 3s
&lt;/code>&lt;/pre>
&lt;p>Which tells us that the hello app is exposes at port 31984, so we can test it using:&lt;/p>
&lt;pre>&lt;code class="language-bash">curl localhost:31984
&lt;/code>&lt;/pre>
&lt;p>Which should give output similar to:&lt;/p>
&lt;pre>&lt;code class="language-bash">Go Hello 1 from hello-656897b96f-dvwc7 on GET ./
&lt;/code>&lt;/pre>
&lt;p>On your host machine, list the multipass VMs:&lt;/p>
&lt;pre>&lt;code class="language-bash">multipass list
&lt;/code>&lt;/pre>
&lt;p>Which should give output similar to:&lt;/p>
&lt;pre>&lt;code class="language-bash">k8s-master Running 192.168.64.52 Ubuntu 20.04 LTS
10.1.235.192
&lt;/code>&lt;/pre>
&lt;p>Which tells us that we can access the app running in our Kubernetes instance using:&lt;/p>
&lt;pre>&lt;code class="language-bash">curl 192.168.64.52:31984
&lt;/code>&lt;/pre>
&lt;p>Or by simply pointing our browser to http://192.168.64.52:31984&lt;/p>
&lt;h3 id="next-steps">Next Steps&amp;hellip;&lt;/h3>
&lt;p>To get more familiar with Kubernetes, follow some basic tutorials &lt;a href="https://kubernetes.io/docs/tutorials/" target="_blank" rel="noopener">here&lt;/a> and find some more &lt;a href="https://katacoda.com/courses/kubernetes" target="_blank" rel="noopener">here&lt;/a>. Again, google is your friend, there is plenty of content out there.&lt;/p>
&lt;p>In addition, you can install some readily available &lt;a href="https://microk8s.io/docs/addons" target="_blank" rel="noopener">MicroKs add ons&lt;/a> like &lt;a href="https://istio.io/" target="_blank" rel="noopener">Istio&lt;/a> or &lt;a href="https://knative.dev/" target="_blank" rel="noopener">Knative&lt;/a> and play around with those. Last but not least, extend your single node cluster with &lt;a href="https://microk8s.io/docs/clustering" target="_blank" rel="noopener">additional nodes&lt;/a>!&lt;/p>
&lt;p>As for me, my next step will be to setup a &lt;a href="https://rancher.com/" target="_blank" rel="noopener">Rancher&lt;/a> instance and create a managed local cluster.&lt;/p></description></item><item><title>Minikube - Kubernetes for developers</title><link>https://www.kleinloog.ch/post/minikube-kubernetes/</link><pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate><guid>https://www.kleinloog.ch/post/minikube-kubernetes/</guid><description>&lt;p>As described &lt;a href="https://www.kleinloog.ch/post/which-local-kubernetes">here&lt;/a>, I decided to take a deeper look at &lt;a href="https://minikube.sigs.k8s.io/docs/" target="_blank" rel="noopener">minikube&lt;/a> to run a Kubernetes cluster on my dev machine.
These are the details and some of my learnings along the way.&lt;/p>
&lt;h3 id="preparation">Preparation&lt;/h3>
&lt;p>As usual, before starting any experiments, I want my MacBook up to date, so I make sure that I have the latest updates installed.
At the time of writing, these are macOS Catalina version 10.15.5 and Xcode version 11.5.
Then I make sure that brew and any installed packages are up to date as well:&lt;/p>
&lt;pre>&lt;code class="language-bash">brew update
brew upgrade
brew cask upgrade
&lt;/code>&lt;/pre>
&lt;p>In addition, make sure there are no issues. If there are, resolve them first:&lt;/p>
&lt;pre>&lt;code class="language-bash">brew doctor
&lt;/code>&lt;/pre>
&lt;p>Should give the following output when all is ready:&lt;/p>
&lt;pre>&lt;code class="language-bash">Your system is ready to brew.
&lt;/code>&lt;/pre>
&lt;p>Should you run into any issues, google is your friend&amp;hellip;&lt;/p>
&lt;p>If you are running windows, &lt;a href="https://chocolatey.org/" target="_blank" rel="noopener">chocolatey&lt;/a> is a decent alternative to brew.&lt;/p>
&lt;p>If not already installed, make sure you have &lt;a href="https://hub.docker.com/editions/community/docker-ce-desktop-mac" target="_blank" rel="noopener">Docker Desktop&lt;/a> up and running.
This should also come with &lt;a href="https://github.com/moby/hyperkit" target="_blank" rel="noopener">Hyperkit&lt;/a>, a lightweight hypervisor for macOS.
You can find other alternatives &lt;a href="https://minikube.sigs.k8s.io/docs/drivers/" target="_blank" rel="noopener">here&lt;/a>.&lt;/p>
&lt;h3 id="installation">Installation&lt;/h3>
&lt;p>Install minikube and &lt;a href="https://kubernetes.io/docs/reference/kubectl/overview/" target="_blank" rel="noopener">kubectl&lt;/a>:&lt;/p>
&lt;pre>&lt;code class="language-bash">brew install minikube
brew install kubectl
&lt;/code>&lt;/pre>
&lt;h3 id="first-cluster">First Cluster&lt;/h3>
&lt;p>Create a cluster:&lt;/p>
&lt;pre>&lt;code class="language-bash">minikube start
&lt;/code>&lt;/pre>
&lt;p>Gives an output similar to:&lt;/p>
&lt;pre>&lt;code class="language-plaintext">😄 minikube v1.11.0 on Darwin 10.15.5
✨ Using the hyperkit driver based on user configuration
🆕 Kubernetes 1.18.3 is now available. If you would like to upgrade, specify: --kubernetes-version=v1.18.3
👍 Starting control plane node minikube in cluster minikube
🔥 Creating hyperkit VM (CPUs=2, Memory=2048MB, Disk=20000MB) ...
🐳 Preparing Kubernetes v1.14.7 on Docker 19.03.8 ...
🔎 Verifying Kubernetes components...
🌟 Enabled addons: default-storageclass, storage-provisioner
🏄 Done! kubectl is now configured to use &amp;quot;minikube&amp;quot;
❗ /usr/local/bin/kubectl is version 1.18.3, which may be incompatible with Kubernetes 1.14.7.
💡 You can also use 'minikube kubectl -- get pods' to invoke a matching version
&lt;/code>&lt;/pre>
&lt;p>This tells us that the default Kubernetes version that was used is &lt;strong>1.14.7&lt;/strong>, and that the cluster has &lt;strong>2&lt;/strong> CPUs, &lt;strong>2 GB&lt;/strong> of memory and &lt;strong>20 GB&lt;/strong> of disk spaces at its disposable.
It also tells us that the latest available version of Kubernetes is &lt;strong>1.18.3&lt;/strong>.
Since this is my dev machine, I want to use the latest Kubernetes version, and I want to assign more resources.
Remove the cluster:&lt;/p>
&lt;pre>&lt;code class="language-bash">minikube delete
&lt;/code>&lt;/pre>
&lt;p>Gives an output similar to:&lt;/p>
&lt;pre>&lt;code class="language-plaintext">🔥 Deleting &amp;quot;minikube&amp;quot; in hyperkit ...
💀 Removed all traces of the &amp;quot;minikube&amp;quot; cluster.
&lt;/code>&lt;/pre>
&lt;p>Create a new cluster as follows:&lt;/p>
&lt;pre>&lt;code class="language-bash">minikube start --kubernetes-version=v1.18.3 --cpus=4 --memory='8g' --disk-size='80000mb'
&lt;/code>&lt;/pre>
&lt;p>Gives an output similar to:&lt;/p>
&lt;pre>&lt;code class="language-plaintext">😄 minikube v1.11.0 on Darwin 10.15.5
✨ Using the hyperkit driver based on user configuration
👍 Starting control plane node minikube in cluster minikube
🔥 Creating hyperkit VM (CPUs=4, Memory=8192MB, Disk=80000MB) ...
🐳 Preparing Kubernetes v1.18.3 on Docker 19.03.8 ...
🔎 Verifying Kubernetes components...
🌟 Enabled addons: default-storageclass, storage-provisioner
🏄 Done! kubectl is now configured to use &amp;quot;minikube&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>That is more like it. A local Kubernetes cluster up and running, and everything is up to date.
If you want, you can open the kubernetes dashboard using:&lt;/p>
&lt;pre>&lt;code class="language-bash">minikube dashboard
&lt;/code>&lt;/pre>
&lt;p>The dashboard will be installed and opened in a browser tab.&lt;/p>
&lt;h3 id="pause-and-resume">Pause and resume&lt;/h3>
&lt;p>One very useful feature of minikube is that you can pause and resume your cluster.
If you don&amp;rsquo;t need it for now, pause the cluster using:&lt;/p>
&lt;pre>&lt;code class="language-bash">minikube stop
&lt;/code>&lt;/pre>
&lt;p>Gives an output similar to:&lt;/p>
&lt;pre>&lt;code class="language-plaintext">✋ Stopping &amp;quot;minikube&amp;quot; in hyperkit ...
🛑 Node &amp;quot;minikube&amp;quot; stopped.
&lt;/code>&lt;/pre>
&lt;p>At a later point, you can resume it using:&lt;/p>
&lt;pre>&lt;code class="language-bash">minikube start --kubernetes-version=v1.18.3
&lt;/code>&lt;/pre>
&lt;p>Gives an output similar to:&lt;/p>
&lt;pre>&lt;code class="language-plaintext">😄 minikube v1.11.0 on Darwin 10.15.5
✨ Using the hyperkit driver based on existing profile
👍 Starting control plane node minikube in cluster minikube
🔄 Restarting existing hyperkit VM for &amp;quot;minikube&amp;quot; ...
🐳 Preparing Kubernetes v1.18.3 on Docker 19.03.8 ...
🔎 Verifying Kubernetes components...
🌟 Enabled addons: default-storageclass, storage-provisioner
🏄 Done! kubectl is now configured to use &amp;quot;minikube&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>Notice that you do need to provide the Kubernetes version if you specified one different from the default.
This command can also be used to upgrade the Kubernetes version if a newer one becomes available.&lt;/p>
&lt;h3 id="multiple-clusters">Multiple Clusters&lt;/h3>
&lt;p>Another very useful feature of minikube is the ability to run multiple clusters.
You can run them at the same time to do multi-cluster experiments, or pause / resume them when switching between projects.
Let&amp;rsquo;s first delete the previously created cluster:&lt;/p>
&lt;pre>&lt;code class="language-bash">minikube delete
&lt;/code>&lt;/pre>
&lt;p>Then create our first cluster:&lt;/p>
&lt;pre>&lt;code class="language-bash">minikube start -p cluster1 --kubernetes-version=v1.18.3
&lt;/code>&lt;/pre>
&lt;p>And then a second one:&lt;/p>
&lt;pre>&lt;code class="language-bash">minikube start -p cluster2 --kubernetes-version=v1.18.3
&lt;/code>&lt;/pre>
&lt;p>You can see the clusters using:&lt;/p>
&lt;pre>&lt;code class="language-bash">kubectl config get-contexts
&lt;/code>&lt;/pre>
&lt;p>Gives an output similar to:&lt;/p>
&lt;pre>&lt;code class="language-plaintext">CURRENT NAME CLUSTER AUTHINFO NAMESPACE
cluster1 cluster1 cluster1
* cluster2 cluster2 cluster2
&lt;/code>&lt;/pre>
&lt;p>The * marks the currently selected context. You can also see that using:&lt;/p>
&lt;pre>&lt;code class="language-bash">% kubectl config current-context
cluster2
&lt;/code>&lt;/pre>
&lt;p>You can switch between clusters by selecting their context:&lt;/p>
&lt;pre>&lt;code class="language-plaintext">% kubectl config use-context cluster1
Switched to context &amp;quot;cluster1&amp;quot;.
&lt;/code>&lt;/pre>
&lt;p>Stop one of the clusters if you don&amp;rsquo;t need it for now:&lt;/p>
&lt;pre>&lt;code class="language-plaintext">% minikube stop -p cluster2
✋ Stopping &amp;quot;cluster2&amp;quot; in hyperkit ...
🛑 Node &amp;quot;cluster2&amp;quot; stopped.
&lt;/code>&lt;/pre>
&lt;p>Resume it when you need it again:&lt;/p>
&lt;pre>&lt;code class="language-plaintext">% minikube start -p cluster2 --kubernetes-version=v1.18.3
😄 [cluster2] minikube v1.11.0 on Darwin 10.15.5
✨ Using the hyperkit driver based on existing profile
👍 Starting control plane node cluster2 in cluster cluster2
🔄 Restarting existing hyperkit VM for &amp;quot;cluster2&amp;quot; ...
🐳 Preparing Kubernetes v1.18.3 on Docker 19.03.8 ...
🔎 Verifying Kubernetes components...
🌟 Enabled addons: default-storageclass, storage-provisioner
🏄 Done! kubectl is now configured to use &amp;quot;cluster2&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>And delete it when you don&amp;rsquo;t need it anymore:&lt;/p>
&lt;pre>&lt;code class="language-plaintext">% minikube delete -p cluster2
🔥 Deleting &amp;quot;cluster2&amp;quot; in hyperkit ...
💀 Removed all traces of the &amp;quot;cluster2&amp;quot; cluster.
&lt;/code>&lt;/pre>
&lt;h3 id="next-steps">Next Steps&amp;hellip;&lt;/h3>
&lt;p>Get more familiar with Kubernetes, follow some basic tutorials to deploy your first app &lt;a href="https://kubernetes.io/docs/tutorials/" target="_blank" rel="noopener">here&lt;/a> and find some more &lt;a href="https://katacoda.com/courses/kubernetes" target="_blank" rel="noopener">here&lt;/a>. Again, google is your friend, there is plenty of content out there.&lt;/p>
&lt;p>As for me, my next step will be to install &lt;a href="https://istio.io/" target="_blank" rel="noopener">Istio&lt;/a> and make sure that my cluster can also be reached from other machines in my network.
I&amp;rsquo;ll present the details in a following post&amp;hellip;&lt;/p></description></item><item><title>Kubernetes on my machine. Great idea, but which one?</title><link>https://www.kleinloog.ch/post/which-local-kubernetes/</link><pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate><guid>https://www.kleinloog.ch/post/which-local-kubernetes/</guid><description>&lt;p>&lt;a href="https://kubernetes.io" target="_blank" rel="noopener">Kubernetes&lt;/a> is the state-of-the-art when it comes to container orchestration.&lt;br>
Built upon years of experience with production workloads at Google, it combines best-of-breed ideas and community practices.
Kubernetes is a classroom example of a successful open source project, drives vendor neutrality and runs basically everywhere.&lt;/p>
&lt;p>Today, I see Kubernetes as the operating system of the Cloud Native world.
It is the base environment for my containerized applications, so I need to have it up and running locally on my development notebook.&lt;/p>
&lt;p>Luckily there are several decent options. All I need to do is choose one.&lt;/p>
&lt;h3 id="my-requirements">My Requirements&lt;/h3>
&lt;p>As always, choosing a solution works best if you understand your needs.
Since this is for my local development environment, my must haves are:&lt;/p>
&lt;ul>
&lt;li>Lightweight, tuns on my laptop&lt;/li>
&lt;li>Easy to install, configure and automate&lt;/li>
&lt;li>Wide support of Kubernetes versions and features&lt;/li>
&lt;li>Cross Platform, available for Mac, Windows and Linux&lt;/li>
&lt;/ul>
&lt;p>In addition, I would like to use the same solution on a development server to create a one node cluster.
Ideally, I should be able to use it with some Raspberry Pis to create a small cluster as well.
These are nice to haves though, using a different distribution for each purpose is an option too.&lt;/p>
&lt;h3 id="the-alternatives">The Alternatives&lt;/h3>
&lt;p>So far, I have identified the following solutions as promising:&lt;/p>
&lt;p>&lt;a href="https://www.docker.com/blog/kubernetes-is-now-available-in-docker-desktop-stable-channel/" target="_blank" rel="noopener">Docker Desktop&lt;/a> ships with a bundled Kubernetes offering.
The Kubernetes version it supports is tightly coupled with the Docker version. The current version (2.4.0.0) ships with Kubernetes version 1.18.8.
Since it comes with docker I don&amp;rsquo;t need to install anything. At the same time, I did not find an easy programmatic way to create and destroy a new Kubernetes cluster.&lt;/p>
&lt;p>&lt;a href="https://kind.sigs.k8s.io" target="_blank" rel="noopener">Kind&lt;/a> - Kubernetes IN Docker - is a tool for running local Kubernetes clusters using Docker containers as nodes.
It is an &lt;a href="https://github.com/kubernetes-sigs/kind" target="_blank" rel="noopener">open source&lt;/a> project managed by the Kubernetes Community and was primarily designed for testing Kubernetes itself.
Kind supports multi-node (including HA) clusters and is optimized for CI pipelines.&lt;/p>
&lt;p>&lt;a href="https://minikube.sigs.k8s.io/docs/" target="_blank" rel="noopener">Minikube&lt;/a> sets up a local single node Kubernetes cluster using a VM.
It is another &lt;a href="https://github.com/kubernetes/minikube" target="_blank" rel="noopener">open source&lt;/a> project managed by the Kubernetes Community and was designed to make it simple to run Kubernetes locally, for day-to-day development workflows and learning purposes.
Minikube supports multiple container runtimes and advanced features such as load balancer, filesystem mounts, and feature gates.&lt;/p>
&lt;p>&lt;a href="https://k3d.io" target="_blank" rel="noopener">K3d&lt;/a> is a lightweight wrapper to run &lt;a href="https://k3s.io" target="_blank" rel="noopener">k3s&lt;/a>, Rancher Lab’s minified Kubernetes distribution, in docker.
By removing dispensable features (legacy, alpha, non-default, in-tree plugins) and using lightweight components (e.g. sqlite3 instead of etcd3) Rancher Labs created an ultra small Kubernetes distribution built for IoT and Edge computing. It supports ARMv7 and ARM64 architectures, making it possible to run a Kubernetes cluster on a set of Raspberry Pis.&lt;/p>
&lt;p>Last but not least, &lt;a href="https://microk8s.io" target="_blank" rel="noopener">MicroK8s&lt;/a> is a production-grade Kubernetes distribution maintained by Canonical.
MicroK8s runs in an immutable container, comes with a range of sensible defaults to ease installation and configuration.
Networking, storage and standard services are supported out of the box and can be customized as needed.
It supports both ARM and Intel architectures, as well as single node and multi node deployments.&lt;/p>
&lt;p>Of course there are other potential alternatives like &lt;a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/" target="_blank" rel="noopener">Kubeadm&lt;/a>, &lt;a href="https://kubespray.io" target="_blank" rel="noopener">Kubespray&lt;/a>, &lt;a href="https://kops.sigs.k8s.io" target="_blank" rel="noopener">Kops&lt;/a> and more. I discarded these because they are not cross platform, require too much manual configuration or are rather geared towards production environments.&lt;/p>
&lt;p>If you feel there is an alternative missing here, please leave a comment.&lt;/p>
&lt;h3 id="how-do-they-compare">How do they compare?&lt;/h3>
&lt;p>The following table lists the alternatives along with some of their characteristics:&lt;/p>
&lt;ul>
&lt;li>Nodes: The number of cluster nodes supported&lt;/li>
&lt;li>CLI: Supports automated installation and configuration&lt;/li>
&lt;li>Multiple: Supports multiple clusters on a single machine&lt;/li>
&lt;li>Versions: Support for different Kubernetes versions&lt;/li>
&lt;li>Features: Support for Kubernetes features&lt;/li>
&lt;li>Resources: Resource usage when compare to each other&lt;/li>
&lt;li>Pauseable: Cluster can be stopped and restarted&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Nodes&lt;/th>
&lt;th>CLI&lt;/th>
&lt;th>Multiple&lt;/th>
&lt;th>Versions&lt;/th>
&lt;th>Features&lt;/th>
&lt;th>Resources&lt;/th>
&lt;th>Pauseable&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>MicroK8s&lt;/td>
&lt;td>n&lt;/td>
&lt;td>Yes&lt;/td>
&lt;td>Yes&lt;/td>
&lt;td>Medium&lt;/td>
&lt;td>Highest&lt;/td>
&lt;td>Low&lt;/td>
&lt;td>Yes&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Minikube&lt;/td>
&lt;td>1&lt;/td>
&lt;td>Yes&lt;/td>
&lt;td>Yes&lt;/td>
&lt;td>High&lt;/td>
&lt;td>Highest&lt;/td>
&lt;td>High&lt;/td>
&lt;td>Yes&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Kind&lt;/td>
&lt;td>n&lt;/td>
&lt;td>Yes&lt;/td>
&lt;td>Yes&lt;/td>
&lt;td>High&lt;/td>
&lt;td>High&lt;/td>
&lt;td>Medium&lt;/td>
&lt;td>No&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>K3d&lt;/td>
&lt;td>n&lt;/td>
&lt;td>No&lt;/td>
&lt;td>Yes&lt;/td>
&lt;td>Low&lt;/td>
&lt;td>Medium&lt;/td>
&lt;td>Low&lt;/td>
&lt;td>No&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Docker&lt;/td>
&lt;td>1&lt;/td>
&lt;td>No&lt;/td>
&lt;td>No&lt;/td>
&lt;td>Single&lt;/td>
&lt;td>High&lt;/td>
&lt;td>Medium&lt;/td>
&lt;td>Yes&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="conclusion">Conclusion&lt;/h3>
&lt;p>This exercise provided me with some interesting insights.&lt;/p>
&lt;p>I won&amp;rsquo;t be using the Docker Desktop version, mainly because it only supports a single Kubernetes version and I haven&amp;rsquo;t found a way to programmatically create, configure and destroy the cluster.&lt;/p>
&lt;p>Running a Kubernetes cluster on a set of Raspberry Pis is definitely something I want to spend some time on.
With two options to try out I can&amp;rsquo;t wait to get started. I&amp;rsquo;ll add a post as soon as I get to it.&lt;/p>
&lt;p>Both Kind and Minikube are interesting options managed by the Kubernetes community.
They have done an awesome job with Kubernetes, so I expect these to be hassle free alternatives.
At first sight, Kind seems to be promising for automated tests in your CI/CD pipeline and Minikube seems to be the most feature rich for your desktop.&lt;/p>
&lt;p>I took a deeper look at Minikube, see this &lt;a href="https://www.kleinloog.ch/post/minikube-kubernetes">post&lt;/a> for the details.
In addition, check this &lt;a href="https://www.kleinloog.ch/post/microk8s-kubernetes">post&lt;/a> to see how to quickly setup a MicroK8s cluster.&lt;/p>
&lt;p>&lt;a href="https://docs.google.com/spreadsheets/d/1LxSqBzjOxfGx3cmtZ4EbB_BGCxT_wlxW_xgHVVa23es/edit#gid=0" target="_blank" rel="noopener">Here&lt;/a> is an updated list of certified Kubernetes offerings and the versions they support, and &lt;a href="https://github.com/cncf/k8s-conformance" target="_blank" rel="noopener">here&lt;/a> is more info on conformance.&lt;/p>
&lt;p>If you see things differently, or feel like I missed something, please leave a comment!&lt;/p></description></item></channel></rss>
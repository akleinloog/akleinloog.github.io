[{"authors":["admin"],"categories":null,"content":"Currently working as a software architect in a team focused on digital health solutions at Roche Diagnostics, I am passionate about all things related to software architecture and software engineering. Even more so when it comes to cloud native software, a world that I have just started to explore.\nI believe that cloud native software as a medical device (SaMD) has the potential to make advances in healthcare technology accessible to patients and medical professionals worldwide, and am looking forward to make my contribution towards unlocking this potential.\nTo be clear, all opinions expressed on this site are my own and do not necessarily represent the position of Roche or any of Roche\u0026rsquo;s affiliates.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1589750916,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://akleinloog.github.io/author/arnoud-kleinloog/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/arnoud-kleinloog/","section":"authors","summary":"Currently working as a software architect in a team focused on digital health solutions at Roche Diagnostics, I am passionate about all things related to software architecture and software engineering. Even more so when it comes to cloud native software, a world that I have just started to explore.","tags":null,"title":"Arnoud Kleinloog","type":"authors"},{"authors":null,"categories":null,"content":"This goal of this project is to create a simple HTTP Logger in Go, that logs all incoming HTTP requests in a structured way.\nThe What A Simple HTTP Logger that can be configured to run on any port.\nMy main requirements:\n Log HTTP GET, POST, PUT and other methods to stdout Always return 200 OK as response Structured logging in JSON format Log Host, URL, Method, IP addresses, request body and more Containerized, lightweight, easily usable in different environments  Additional nice to haves:\n Enforce SSL with redirect and correct certificates Easy configuration (flags, environment settings, config files) Easy way to access request body  The Why The HTTP Logger can be used to gain some insights into HTTP traffic, for example, when you want to test if a webhook is properly sending messages, and what the content of these messages is.\nIn addition, it is a perfectly small Microservice, ideally suited to learn some Go development practices that could be suited for other Microservices too.\nThe How The HTTP Logger will be implemented using Go, a language that I am not yet familiar with, but really want to learn. And for me, the best way to learn after some basic tutorials is to put things into practice.\nIn order to learn a bit more about Go, I will pay attention to:\n Structured Logging (stdout in JSON) Flexible Configuration (Support for Flags, Environment, Config file, etx) Proper CLI support  The Results I just started this project, so there are no results to share just yet. I will detail the progress in a series of blog posts and update this section when the HTTP Logger is available.\nIn the end, my solution will be publicly available on GitHub and on Docker, for you to use freely, to learn from, and hopefully, to provide some feedback on!\n","date":1590105600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590168296,"objectID":"cf35cdfd6956de0de868fce01ec1a116","permalink":"https://akleinloog.github.io/project/http-logger/","publishdate":"2020-05-22T00:00:00Z","relpermalink":"/project/http-logger/","section":"project","summary":"A simple HTTP Logger that logs all requests, written in Go.","tags":["Go","Docker"],"title":"HTTP Logger","type":"project"},{"authors":null,"categories":null,"content":"This goal of this project is to come up with an approach for rapid prototyping of APIs that support both REST and GraphQL.\nThe What A containerized starting point that can be used to quickly implement a prototype of an API, customize it as needed, and easily add initial content.\nMy main requirements:\n Support for RESTful APIs Support for GraphQL APIs Easily modify the API and add initial content Free of costs (no licence fees)  Additional nice to haves:\n Support for Webhooks Support for Authentication Support for Open API documentation  The Why Every now and then I find myself in a situation where I need to quickly create a prototype of an API. This often happens when exploring a design for a new Microservice, especially when that Microservice depends on other services.\nIn order to properly allocate responsibilities and design the interactions between these Microservice, I often find it useful to create some working prototypes of the dependent Microservices.\nBeing able to do so quickly, while having a rich feature set at the same time, enables me to apply a show me approach to software architecture, which I find far more interesting and effective, and therefore more valuable, than the more common diagrams-based tell me approach.\nThe How The strapi project was initially created to bootstrap APIs. Even though it is now advertised as a Headless CMS, from what I have seen, it could be a very good fit for what I need.\nBased on strapi, I will create a docker image that is pre-configured and ready to use. In the process, I will tailor the image to my needs and in addition, set up an automated build that pushes new versions of that image to docker hub. This is something that I never did, so a good opportunity to learn.\nThe Results I just started this project, so there are no results to share just yet. I will detail the progress in a series of blog posts and update this section when the results are available.\nIn the end, my solution will be publicly available on GitHub and on Docker, for you to use freely, to learn from, and hopefully, to provide some feedback on!\n","date":1589587200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590168296,"objectID":"c9c9ea68ad32475689b1ee751020b92b","permalink":"https://akleinloog.github.io/project/rapid-api/","publishdate":"2020-05-16T00:00:00Z","relpermalink":"/project/rapid-api/","section":"project","summary":"Rapid API prototyping of RESTful and GraphQL based APIs.","tags":["API","REST","GraphQL","Prototyping","strapi"],"title":"Rapid API","type":"project"},{"authors":["Arnoud Kleinloog"],"categories":null,"content":"This is the second part in a series of posts detailing the set up of my personal blog. It details how to enable google analytics, commenting and a simple contact page. See part 1 for the basic setup.\nEnable Google Analytics  Google Analytics can provide you with some interesting insights on your site\u0026rsquo;s visitors and the way they use your site. Enabling it on my personal blog provides a nice opportunity to learn a bit more about the possibilities it offers to site owners.\nLucky for me, it is a straight forward exercise. After signing up for google analytics and creating an account for your website, all you need to do is open your params.toml in _/config/default and add the account id:\n############################ ## Marketing ############################ [marketing] google_analytics = \u0026quot;UA-***\u0026quot; # google_tag_manager = \u0026quot;\u0026quot;  I signed up for Google Tag Manager as well, and tried to activate it, but no luck so far. In order to get Google Analytics to work I had to comment out the google_tag_manager entry. If I decide to take another look at this and get it to work, I\u0026rsquo;ll detail it in a follow up post.\nThe next step is to configure the base URL of your site, in config.toml in _/config/default. If you used a custom domain:\n# The URL of your site. baseurl = \u0026quot;https://www.yourdomain.com/\u0026quot;  Otherwise, use your GitHub Pages URL:\n# The URL of your site. baseurl = \u0026quot;https://\u0026lt;username here\u0026gt;.github.io/\u0026quot;  The last change is an improvement to the deploy script we created in the previous post. In deploy.sh replace the following:\necho \u0026quot;Running Hugo Build\u0026quot; hugo -t academic  with:\necho \u0026quot;Running Hugo Build\u0026quot; env HUGO_ENV=\u0026quot;production\u0026quot; hugo --gc --minify -t academic -b https://\u0026lt;username here\u0026gt;.github.io  Doing so will activate the Google Analytics scripts when the site is running in production. In addition, it also instructs Hugo to run some cleanup tasks after the build and to minify the output, something I didn\u0026rsquo;t pay attention to in my previous post.\nEnable Google Search Console Another thing I decided to add is Google Search Console, another free-to-use service offered by Google that helps you monitor, maintain, and troubleshoot your site\u0026rsquo;s presence in Google Search results.\nAfter using the \u0026lsquo;URL prefix\u0026rsquo; method, my site ownership was automatically verified based on the Google Analytics account. I added an additional verification method by going to Settings-\u0026gt;Ownership Verification, and selecting HTML File. Download the file, add it to your /static folder and redeploy the site:\n./deploy.sh  Of course I realize that, as is the case with most \u0026lsquo;free service\u0026rsquo; offerings, I am being part of the product here. Google will use all information they get in ways they see fit. Since what I am doing here is \u0026lsquo;out in the open\u0026rsquo; and dedicated to the public domain, I figured it would make a good opportunity to learn more about these Google services, and I appreciate that the collected information (or at least some of it) is shared with me as well.\nCommenting with Disqus Enabling others to comment on your site turns it into an interactive site and is relatively easy to do. First go to https://disqus.com and sign up. I selected the basic, free package. Then open params.toml in your _config/default directory and fill in the comments section to enable commenting:\n############################ ## Comments ############################ [comments] ... engine = 1 ... [comments.disqus] shortname = \u0026quot;\u0026lt;shortname\u0026gt;\u0026quot; # Paste the shortname from your Disqus dashboard  When you run the site locally, the commenting section won\u0026rsquo;t be enabled, but you should see a warning like \u0026ldquo;Disqus comments not available by default when the website is previewed locally.\u0026quot; at the bottom of your posts.\nDeploy your website to production and see how it works!\nContact Page Adding a simple contact page can be done with Academic\u0026rsquo;s contact widget.\nFor this side, I decided to add it to the bottom of the about page, and in addition, add a top-level menu and a link from my profile.\nTo add a top level menu, open _config/default/menus.toml and add:\n[[main]] name = \u0026quot;Contact\u0026quot; url = \u0026quot;about/#contact\u0026quot; weight = 50  In _config/default/params.toml, make sure that an email address is configured.\nTo add a link from your profile, open _authors/admin/index.md and add this to the social section:\n- icon: envelope icon_pack: fas link: 'about/#contact'  To add the contact form itself, in the content/about/ folder, add contact.md with the following content:\n+++ # Contact widget. widget = \u0026quot;contact\u0026quot; headless = true active = true weight = 50 title = \u0026quot;Contact\u0026quot; subtitle = \u0026quot;\u0026quot; # Automatically link email and phone? autolink = true # Email form provider # 0: Disable email form # 1: Netlify (requires that the site is hosted by Netlify) # 2: formspree.io email_form = 2 +++  This sets up your site to use Formspree to email you the request. After deploying to production, simply fill in the form once and you will receive an email to complete your registration. Their free plan gives you a limited amount of monthly submissions.\nThe contact widget can be further customized by providing additional information in your params.toml, see the docs for more detail.\n","date":1588982400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589750916,"objectID":"2e115cc785622b6d201466043655c22e","permalink":"https://akleinloog.github.io/post/my-blog-pt2/","publishdate":"2020-05-09T00:00:00Z","relpermalink":"/post/my-blog-pt2/","section":"post","summary":"How to add Google Analytics and google Google Search Console .","tags":["Academic","Hugo"],"title":"Setting up this Blog - Part 2","type":"post"},{"authors":["Arnoud Kleinloog"],"categories":null,"content":"This is the first in a series of posts detailing the set up of my personal blog. It covers the basic steps needed to get started.\nI use Hugo as a static site generator and Visual Studio Code as editor. The resulting website is hosted using GitHub Pages. A nice combination of open source tools with a free hosting provider that poses no restrictions in terms of traffic, size, etc. Sounds like a perfect match to me.\nFamiliarity with git and the command line are assumed. I use a Mac, some of the commands may need to be translated to your environment.\nGetting started Following this Hugo tutorial, I created two repositories on GitHub. One named website for the sources, and another one for the generated website.\n The name of the repository for the generated website has to be specific in order for it to be picked up by GitHub Pages. In my case: akleinloog.github.io   I decided to dedicate both repositories to the public domain and therefore used the UNLICENSE. Feel free to use anything you find there as you see fit.\nThe next step is to clone the repository used for the source:\ngit clone https://github.com/\u0026lt;username here\u0026gt;/website.git  And open the project in Visual Studio Code:\ncd website code .  Add the following .gitignore file and optionally, save the code workspace:\n# MacOS Files .DS_Store # Hugo Working Folders resources/  Install Hugo if not already installed:\nbrew install hugo  And initialize your repository for Hugo:\nhugo new site . --force  Select a theme A good overview of available themes can be found here. Select Hugo and order the themes by Stars gives you an overview of the most used themes.\nI decided to try Academic, a feature rich, open source theme developed by George Cushen and made available under the MIT license. Thanks George!\nAdd the theme as a git submodule:\ngit submodule add https://github.com/gcushen/hugo-academic.git themes/academic  Familiarize yourself with Academic, and customize it as you see fit. A good way to do that, is to clone the Academic Kickstart project in a separate directory. It provides a good demonstration of what the theme has to offer.\nAdd some content First add the configuration files. You can copy the ones from the Academic Kickstart project to get started. Read through them and adjust as you see fit.\nAlso copy the page_sharer.toml file in the data folder to your local project.\nPlaying around with Academic\u0026rsquo;s many widgets using the Kickstart project should give you a fair idea on what other content you want to add. You can also have a look at my sources repository to see what I did for this blog.\nTry it out locally Experiment with the configuration options and the structure. Run the site in development mode using:\nhugo server  The site will be available at http://localhost:1313. Whenever you save your changes, Hugo will react and automatically refresh the website, providing a very pleasant live-editing experience.\nGet ready to publish Add the repository for the generated website as a git submodule:\ngit submodule add -b master https://github.com/\u0026lt;username here\u0026gt;/\u0026lt;username here\u0026gt;.github.io.git public  Doing so ensures that the HTML and JavaScript generated by Hugo will be placed in that repository.\nFirst, we\u0026rsquo;ll do a manual run. Generate your website:\nhugo -t academic  Test the generated output using the serve package:\ncd public npx serve  Automate it Add a file called deploy.sh to the sources repository\u0026rsquo;s main folder. Ensure it is executable:\nchmod +x deploy.sh  Add the following content to that file:\n#!/bin/sh set -e echo \u0026quot;Cleaning Publish Folder\u0026quot; rm -r ./public/* echo \u0026quot;Running Hugo Build\u0026quot; hugo -t academic cd public echo \u0026quot;Adding changes to git\u0026quot; git add . msg=\u0026quot;regenerating site content $(date)\u0026quot; git commit -m \u0026quot;$msg\u0026quot; echo \u0026quot;Pushing to master\u0026quot; git push origin master cd .. echo \u0026quot;Deployment Finished\u0026quot;  This script uses Hugo to generate your website and commit the changes to the generated website repository. By pushing these changes to GitHub, the script effectively deploys your website to production. Give it a try:\n./deploy.sh  Navigate to your GitHub Pages URL to see the result!\nAdd a custom domain name Using a custom domain name for your GitHub pages is relatively straight forward. First register a domain name and then configure the DNS settings.\nCreate the following A records for your domain to point it to GitHub\u0026rsquo;s servers:\n185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153  Then add a CNAME record for www that points to the your GitHub site.\nThen go to the GitHub repository settings of your generated site. In the GitHub Pages section, enter the domain you\u0026rsquo;ve registered in the custom domain field, with the www. prefix, and save it. This will trigger a check-in that adds a CNAME file with the domain that you have specified.\nKeep in mind that may take some time for DNS changes to take effect, and for the SSL certificates to be generated. Once completed, check the \u0026lsquo;Enforce HTTPS\u0026rsquo; checkbox and the setup is completed.\nYour domain name will be forwarded to your www. and so will your GitHub pages and HTTPS will be automatically enforces, with valid a certificate for your URL, free of charge!\nSee the GitHub Pages docs for more information and troubleshooting tips.\nUpdate your sources repository The last thing to do, before making other modifications to your site, is to secure the CNAME file in your sources repository so that it does not get deleted when you regenerate your website. First pull the changes:\ncd public git pull --all  This will update your local module and add the CNAME file. Now copy that file from the public folder to the static folder so it will be re-added when the site is regenerated. Commit and push your changes and you are good to go!\nNext Steps I hope you have enjoyed this as much as I did, in Part 2 I will add support for Google Analytics, comments and a simple contact page.\n","date":1588723200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589322899,"objectID":"b49638f9d39038b22b0383ee21a254e3","permalink":"https://akleinloog.github.io/post/my-blog-pt1/","publishdate":"2020-05-06T00:00:00Z","relpermalink":"/post/my-blog-pt1/","section":"post","summary":"How to set up a simple blog with Hugo and GitHub Pages.","tags":["Academic","Hugo"],"title":"Setting up this Blog - Part 1","type":"post"},{"authors":null,"categories":null,"content":"The goal of this project was to set up a simple website to use as a personal blog. You are currently looking at the result of this!\nThe What The basic idea was to set up a blog where I can easily manage my posts and provide some info on myself and the projects I work on. Having played around with Wordpress in the past, I wanted something different this time.\nMy main requirements:\n Easy to use (for me) Easy to host Free of costs (no licence or hosting fees) Learn something new in the process  The Why My main motivation is to have a place to keep track of the many technical experiments I do and their outcomes. A blog that allows me to write small posts, tag them, and easily search through them seemed like a good solution.\nIf others can also find these experiments and learn from them, that would be an additional benefit. And if they in turn can provide feedback, even better.\nThe How After looking around a bit I decided to try out the following:\n Use Hugo, a Static Site Generator written in Go Write the content in markdown Use a GitHub repository to keep the sources Use another GitHub repository to host the resulting blog Open Source the result so others might learn from it  The Results The current state of this project is open for all to see. Look around and take a look at the sources if you are interested.\nThis is still a work in progress, I will add some posts that detail what I did and what I used, and hope to add some additional features soon, for example, the possibility for others to comment.\nI hope you will find this useful somehow!\n","date":1588636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590168296,"objectID":"8174ecd8e0648e049ff264ac750633bb","permalink":"https://akleinloog.github.io/project/personal-blog/","publishdate":"2020-05-05T00:00:00Z","relpermalink":"/project/personal-blog/","section":"project","summary":"A simple website to be used as my personal blog.","tags":["Hugo"],"title":"Personal Blog","type":"project"},{"authors":null,"categories":null,"content":"","date":1588377600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588623963,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://akleinloog.github.io/about/","publishdate":"2020-05-02T00:00:00Z","relpermalink":"/about/","section":"","summary":"About the author","tags":null,"title":"About","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":1588377600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588625778,"objectID":"475f2249a5c02879faf32697c0e89e6e","permalink":"https://akleinloog.github.io/portfolio/","publishdate":"2020-05-02T00:00:00Z","relpermalink":"/portfolio/","section":"","summary":"Some of the projects I have been working on","tags":null,"title":"Projects","type":"widget_page"}]
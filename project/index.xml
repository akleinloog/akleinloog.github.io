<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projects | My Site</title><link>https://akleinloog.github.io/project/</link><atom:link href="https://akleinloog.github.io/project/index.xml" rel="self" type="application/rss+xml"/><description>Projects</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Dedicated to the public domain Â· [Unlicensed](https://github.com/akleinloog/akleinloog.github.io/blob/master/LICENSE)</copyright><lastBuildDate>Fri, 22 May 2020 00:00:00 +0000</lastBuildDate><image><url>https://akleinloog.github.io/images/icon_hu1d96926d990b8c2ce1741b9516caf288_71361_512x512_fill_lanczos_center_2.png</url><title>Projects</title><link>https://akleinloog.github.io/project/</link></image><item><title>HTTP Logger</title><link>https://akleinloog.github.io/project/http-logger/</link><pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate><guid>https://akleinloog.github.io/project/http-logger/</guid><description>&lt;p>This goal of this project is to create a simple HTTP Logger in Go, that logs all incoming HTTP requests in a structured way.&lt;/p>
&lt;h2 id="the-what">The What&lt;/h2>
&lt;p>A Simple HTTP Logger that can be configured to run on any port.&lt;/p>
&lt;p>My main requirements:&lt;/p>
&lt;ul>
&lt;li>Log HTTP GET, POST, PUT and other methods to stdout&lt;/li>
&lt;li>Always return 200 OK as response&lt;/li>
&lt;li>Structured logging in JSON format&lt;/li>
&lt;li>Log Host, URL, Method, IP addresses, request body and more&lt;/li>
&lt;li>Containerized, lightweight, easily usable in different environments&lt;/li>
&lt;/ul>
&lt;p>Additional nice to haves:&lt;/p>
&lt;ul>
&lt;li>Enforce SSL with redirect and correct certificates&lt;/li>
&lt;li>Easy configuration (flags, environment settings, config files)&lt;/li>
&lt;li>Easy way to access request body&lt;/li>
&lt;/ul>
&lt;h2 id="the-why">The Why&lt;/h2>
&lt;p>The HTTP Logger can be used to gain some insights into HTTP traffic, for example, when you want to test if a webhook is properly sending messages, and what the content of these messages is.&lt;/p>
&lt;p>In addition, it is a perfectly small Microservice, ideally suited to learn some Go development practices that could be suited for other Microservices too.&lt;/p>
&lt;h2 id="the-how">The How&lt;/h2>
&lt;p>The HTTP Logger will be implemented using Go, a language that I am not yet familiar with, but really want to learn.
And for me, the best way to learn after some basic tutorials is to put things into practice.&lt;/p>
&lt;p>In order to learn a bit more about Go, I will pay attention to:&lt;/p>
&lt;ul>
&lt;li>Structured Logging (stdout in JSON)&lt;/li>
&lt;li>Flexible Configuration (Support for Flags, Environment, Config file, etx)&lt;/li>
&lt;li>Proper CLI support&lt;/li>
&lt;/ul>
&lt;h2 id="the-results">The Results&lt;/h2>
&lt;p>I just started this project, so there are no results to share just yet.
I will detail the progress in a series of blog posts and update this section when the HTTP Logger is available.&lt;/p>
&lt;p>In the end, my solution will be publicly available on GitHub and on Docker, for you to use freely, to learn from, and hopefully, to provide some feedback on!&lt;/p></description></item><item><title>Rapid API</title><link>https://akleinloog.github.io/project/rapid-api/</link><pubDate>Sat, 16 May 2020 00:00:00 +0000</pubDate><guid>https://akleinloog.github.io/project/rapid-api/</guid><description>&lt;p>This goal of this project is to come up with an approach for rapid prototyping of APIs that support both REST and GraphQL.&lt;/p>
&lt;h2 id="the-what">The What&lt;/h2>
&lt;p>A containerized starting point that can be used to quickly implement a prototype of an API, customize it as needed, and easily add initial content.&lt;/p>
&lt;p>My main requirements:&lt;/p>
&lt;ul>
&lt;li>Support for RESTful APIs&lt;/li>
&lt;li>Support for GraphQL APIs&lt;/li>
&lt;li>Easily modify the API and add initial content&lt;/li>
&lt;li>Free of costs (no licence fees)&lt;/li>
&lt;/ul>
&lt;p>Additional nice to haves:&lt;/p>
&lt;ul>
&lt;li>Support for Webhooks&lt;/li>
&lt;li>Support for Authentication&lt;/li>
&lt;li>Support for Open API documentation&lt;/li>
&lt;/ul>
&lt;h2 id="the-why">The Why&lt;/h2>
&lt;p>Every now and then I find myself in a situation where I need to quickly create a prototype of an API.
This often happens when exploring a design for a new Microservice, especially when that Microservice depends on other services.&lt;/p>
&lt;p>In order to properly allocate responsibilities and design the interactions between these Microservice, I often find it useful to create some working prototypes of the Microservices I depend on.&lt;/p>
&lt;p>Being able to do so quickly, while having a rich feature set at the same time, enables me to follow the &lt;strong>show me&lt;/strong> approach to software architecture, which I find far more interesting and effective, and therefore more valuable, than the more common diagrams-based &lt;strong>tell me&lt;/strong> approach.&lt;/p>
&lt;h2 id="the-how">The How&lt;/h2>
&lt;p>The
&lt;a href="https://strapi.io/" target="_blank" rel="noopener">strapi&lt;/a> project was initially created to boot&lt;strong>strap&lt;/strong> &lt;strong>API&lt;/strong>s. Even though it is now advertised as a Headless CMS, from what I have seen, it could be a very good fit for what I need.&lt;/p>
&lt;p>Based on strapi, I will create a docker image that is pre-configured and ready to use. In the process, I will tailor the image to my needs and in addition, set up an automated build that pushes new versions of that image to
&lt;a href="https://hub.docker.com" target="_blank" rel="noopener">docker hub&lt;/a>.
This is something that I did not do before, so a good opportunity to learn.&lt;/p>
&lt;h2 id="the-results">The Results&lt;/h2>
&lt;p>See
&lt;a href="https://akleinloog.github.io/post/rapid-api-prototype">this post&lt;/a> for a detailed description of the process and how to use it.&lt;/p>
&lt;p>The resulting container to get you going with rapid API prototyping is available on docker hub
&lt;a href="https://hub.docker.com/r/akleinloog/rapid-api" target="_blank" rel="noopener">here&lt;/a> and can be started as follows:&lt;/p>
&lt;pre>&lt;code class="language-r">docker run -p 8080:8080 akleinloog/rapid-api
&lt;/code>&lt;/pre>
&lt;p>The code is available in this
&lt;a href="https://github.com/akleinloog/rapid-api" target="_blank" rel="noopener">GitHub repository&lt;/a>.&lt;/p>
&lt;p>Use it freely, learn from it, and ideally, provide some feedback!&lt;/p></description></item><item><title>Personal Blog</title><link>https://akleinloog.github.io/project/personal-blog/</link><pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate><guid>https://akleinloog.github.io/project/personal-blog/</guid><description>&lt;p>The goal of this project was to set up a simple website to use as a personal blog.
You are currently looking at the result of this!&lt;/p>
&lt;h2 id="the-what">The What&lt;/h2>
&lt;p>The basic idea was to set up a blog where I can easily manage my posts and provide some info on myself and the projects I work on.
Having played around with Wordpress in the past, I wanted something different this time.&lt;/p>
&lt;p>My main requirements:&lt;/p>
&lt;ul>
&lt;li>Easy to use (for me)&lt;/li>
&lt;li>Easy to host&lt;/li>
&lt;li>Free of costs (no licence or hosting fees)&lt;/li>
&lt;li>Learn something new in the process&lt;/li>
&lt;/ul>
&lt;h2 id="the-why">The Why&lt;/h2>
&lt;p>My main motivation is to have a place to keep track of the many technical experiments I do and their outcomes.
A blog that allows me to write small posts, tag them, and easily search through them seemed like a good solution.&lt;/p>
&lt;p>If others can also find these experiments and learn from them, that would be an additional benefit. And if they in turn can provide feedback, even better.&lt;/p>
&lt;h2 id="the-how">The How&lt;/h2>
&lt;p>After looking around a bit I decided to try out the following:&lt;/p>
&lt;ul>
&lt;li>Use
&lt;a href="https://gohugo.io/" target="_blank" rel="noopener">Hugo&lt;/a>, a Static Site Generator written in
&lt;a href="https://golang.org/" target="_blank" rel="noopener">Go&lt;/a>&lt;/li>
&lt;li>Write the content in
&lt;a href="https://www.markdownguide.org/" target="_blank" rel="noopener">markdown&lt;/a>&lt;/li>
&lt;li>Use a
&lt;a href="https://github.com/akleinloog/website" target="_blank" rel="noopener">GitHub repository&lt;/a> to keep the sources&lt;/li>
&lt;li>Use another
&lt;a href="https://github.com/akleinloog/akleinloog.github.io" target="_blank" rel="noopener">GitHub repository&lt;/a> to host the resulting blog&lt;/li>
&lt;li>Open Source the result so others might learn from it&lt;/li>
&lt;/ul>
&lt;h2 id="the-results">The Results&lt;/h2>
&lt;p>The current state of this project is open for all to see. Look around and take a look at the sources if you are interested.&lt;/p>
&lt;p>This is still a work in progress, I will add some posts that detail what I did and what I used, and hope to add some additional features soon, for example, the possibility for others to comment.&lt;/p>
&lt;p>I hope you will find this useful somehow!&lt;/p></description></item></channel></rss>
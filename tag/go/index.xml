<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go | My Site</title><link>https://www.kleinloog.ch/tag/go/</link><atom:link href="https://www.kleinloog.ch/tag/go/index.xml" rel="self" type="application/rss+xml"/><description>Go</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Dedicated to the public domain Â· [Unlicensed](https://github.com/akleinloog/akleinloog.github.io/blob/master/LICENSE)</copyright><lastBuildDate>Fri, 05 Jun 2020 00:00:00 +0000</lastBuildDate><image><url>https://www.kleinloog.ch/images/icon_hu1d96926d990b8c2ce1741b9516caf288_71361_512x512_fill_lanczos_center_2.png</url><title>Go</title><link>https://www.kleinloog.ch/tag/go/</link></image><item><title>Go CLI</title><link>https://www.kleinloog.ch/post/go-cli/</link><pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate><guid>https://www.kleinloog.ch/post/go-cli/</guid><description>&lt;p>Let&amp;rsquo;s set up a decent Command Line Interface (CLI) for our Go project.
This has been made easy by &lt;a href="https://github.com/spf13/cobra" target="_blank" rel="noopener">Cobra&lt;/a>, a library that provides a simple interface to create a powerful modern CLI, like you are used to from git, kubectl, etc.&lt;/p>
&lt;p>Cobra comes with a very nice set of features, amongst which:&lt;/p>
&lt;ul>
&lt;li>Easily add commands and nested commands&lt;/li>
&lt;li>Support for flags (including short &amp;amp; long versions)&lt;/li>
&lt;li>Intelligent suggestions (app srver&amp;hellip; did you mean app server?)&lt;/li>
&lt;li>Automatic help generation and support of -h and --help&lt;/li>
&lt;li>Automatically generated bash autocomplete and man pages&lt;/li>
&lt;/ul>
&lt;h3 id="installation">Installation&lt;/h3>
&lt;p>To get started, we&amp;rsquo;ll create a new go project and initialize it, in my case:&lt;/p>
&lt;pre>&lt;code class="language-bash">go mod init github.com/akleinloog/hello
&lt;/code>&lt;/pre>
&lt;p>Then, install the latest version of Cobra:&lt;/p>
&lt;pre>&lt;code class="language-bash">go get github.com/spf13/cobra/cobra
&lt;/code>&lt;/pre>
&lt;p>And initialize the new project:&lt;/p>
&lt;pre>&lt;code class="language-bash">cobra init --pkg-name github.com/akleinloog/hello
&lt;/code>&lt;/pre>
&lt;p>This adds a &lt;em>main.go&lt;/em> file and a &lt;em>cmd&lt;/em> folder with a &lt;em>root.go&lt;/em> file.
The main.go file is very simple, contains some license info and a simple main function:&lt;/p>
&lt;pre>&lt;code class="language-go">package main
import &amp;quot;github.com/akleinloog/hello/cmd&amp;quot;
func main() {
cmd.Execute()
}
&lt;/code>&lt;/pre>
&lt;p>Take a look at the &lt;em>root.go&lt;/em> file in the &lt;em>cmd&lt;/em> folder, and you will notice a few things.
First, it contains a use instruction and a short and a long description.
Change the text to something meaningful for your example. In my case:&lt;/p>
&lt;pre>&lt;code class="language-go">var rootCmd = &amp;amp;cobra.Command{
Use: &amp;quot;hello&amp;quot;,
Short: &amp;quot;Go Hello&amp;quot;,
Long: `A simple HTTP Server written in Go.
It gives out a simple Hello message with a counter, the host name and the requested address.`,
}
&lt;/code>&lt;/pre>
&lt;p>It is good practice not to define an action here. In that case, Cobra will ensure to give out a nice set of instructions.
See for yourself:&lt;/p>
&lt;pre>&lt;code class="language-bash">go build
./hello
&lt;/code>&lt;/pre>
&lt;p>Another thing to notice is that cobra added an &lt;em>Execute()&lt;/em> function, an &lt;em>init()&lt;/em> function and an &lt;em>initConfig()&lt;/em> function.
With that, it added &lt;a href="https://github.com/spf13/viper" target="_blank" rel="noopener">Viper&lt;/a> and support for a configuration file.
We&amp;rsquo;ll add another flag later on, and I will discuss Viper and proper configuration in another post.&lt;/p>
&lt;h3 id="adding-commands">Adding Commands&lt;/h3>
&lt;p>Let&amp;rsquo;s first add a new command that will start our HTTP Server:&lt;/p>
&lt;pre>&lt;code class="language-bash">cobra add serve
&lt;/code>&lt;/pre>
&lt;p>Cobra added a &lt;em>serve.go&lt;/em> file in the &lt;em>cmd&lt;/em> folder, similar to the &lt;em>root.go&lt;/em> we saw earlier.
This time it adds a serve command. Let&amp;rsquo;s update the text again:&lt;/p>
&lt;pre>&lt;code class="language-go">var serveCmd = &amp;amp;cobra.Command{
Use: &amp;quot;serve&amp;quot;,
Short: &amp;quot;Starts the HTTP Server.&amp;quot;,
Long: `Starts the HTTP Server listening at port 80, where it will return a simple hello on any request.`,
Run: func(cmd *cobra.Command, args []string) {
fmt.Println(&amp;quot;serve called&amp;quot;)
},
}
&lt;/code>&lt;/pre>
&lt;p>In the &lt;em>init()&lt;/em> method you see that the command is added to the root command:&lt;/p>
&lt;pre>&lt;code class="language-go">func init() {
rootCmd.AddCommand(serveCmd)
...
}
&lt;/code>&lt;/pre>
&lt;p>Rebuild and run again:&lt;/p>
&lt;pre>&lt;code class="language-bash">go build
./hello
&lt;/code>&lt;/pre>
&lt;p>Notice that the output has now changed.
Information is provided on the commands and on flags that are supported.&lt;/p>
&lt;p>Try the help:&lt;/p>
&lt;pre>&lt;code class="language-bash">./hello serve -h
&lt;/code>&lt;/pre>
&lt;p>Help specific to the serve command is provided.&lt;/p>
&lt;p>Now try the actual command:&lt;/p>
&lt;pre>&lt;code class="language-bash">./hello serve
&lt;/code>&lt;/pre>
&lt;p>You should see the simple &amp;lsquo;serve called&amp;rsquo; output.&lt;/p>
&lt;h3 id="add-the-http-server">Add the HTTP Server&lt;/h3>
&lt;p>Let&amp;rsquo;s implement the HTTP server. We&amp;rsquo;ll keep it simple.
In &lt;em>serve.go&lt;/em> add the following functions:&lt;/p>
&lt;pre>&lt;code class="language-go">var (
requestNr int64 = 0
host string = &amp;quot;unknown&amp;quot;
)
func listen() {
currentHost, err := os.Hostname()
if err != nil {
log.Println(&amp;quot;Could not determine host name:&amp;quot;, err)
} else {
host = currentHost
}
log.Println(&amp;quot;Starting Hello Server on &amp;quot; + host)
http.HandleFunc(&amp;quot;/&amp;quot;, hello)
err = http.ListenAndServe(&amp;quot;:80&amp;quot;, nil)
if err != nil {
log.Fatal(err)
}
}
func hello(w http.ResponseWriter, r *http.Request) {
requestNr++
message := fmt.Sprintf(&amp;quot;Go Hello %d from %s on %s ./%s\n&amp;quot;, requestNr, host, r.Method, r.URL.Path[1:])
log.Print(message)
fmt.Fprint(w, message)
}
&lt;/code>&lt;/pre>
&lt;p>And change the serve command to:&lt;/p>
&lt;pre>&lt;code class="language-go">var serveCmd = &amp;amp;cobra.Command{
Use: &amp;quot;serve&amp;quot;,
Short: &amp;quot;Starts the HTTP Server.&amp;quot;,
Long: `Starts the HTTP Server listening at port 80, where it will return a simple hello on any request.`,
Run: func(cmd *cobra.Command, args []string) {
listen()
},
}
&lt;/code>&lt;/pre>
&lt;p>Rebuild and run the server:&lt;/p>
&lt;pre>&lt;code class="language-bash">go build
./hello serve
&lt;/code>&lt;/pre>
&lt;p>The HTTP Server will start and you can visit &lt;a href="http://localhost" target="_blank" rel="noopener">http://localhost&lt;/a> to see the result.&lt;/p>
&lt;h3 id="add-an-http-client">Add an HTTP Client&lt;/h3>
&lt;p>Let&amp;rsquo;s add another command that will serve as a client for our Server:&lt;/p>
&lt;pre>&lt;code class="language-bash">cobra add get
&lt;/code>&lt;/pre>
&lt;p>Add the following function to &lt;em>get.go&lt;/em>:&lt;/p>
&lt;pre>&lt;code class="language-go">func get() {
resp, err := http.Get(&amp;quot;http://localhost&amp;quot;)
if err != nil {
log.Println(err)
}
defer resp.Body.Close()
scanner := bufio.NewScanner(resp.Body)
for i := 0; scanner.Scan() &amp;amp;&amp;amp; i &amp;lt; 5; i++ {
fmt.Println(scanner.Text())
}
if err := scanner.Err(); err != nil {
log.Println(err)
}
}
&lt;/code>&lt;/pre>
&lt;p>And make sure it is called from the get command:&lt;/p>
&lt;pre>&lt;code class="language-go"> Run: func(cmd *cobra.Command, args []string) {
get()
},
&lt;/code>&lt;/pre>
&lt;p>Rebuild and start the server:&lt;/p>
&lt;pre>&lt;code class="language-bash">go build
./hello serve
&lt;/code>&lt;/pre>
&lt;p>Then from another console window:&lt;/p>
&lt;pre>&lt;code class="language-bash">./hello get
&lt;/code>&lt;/pre>
&lt;p>And you will see the hello as output!&lt;/p>
&lt;h3 id="add-a-flag">Add a Flag&lt;/h3>
&lt;p>To finish up, let&amp;rsquo;s add a flag to specify the port number that our server will listen on.&lt;/p>
&lt;p>We&amp;rsquo;ll keep it simple for now, we want:&lt;/p>
&lt;ul>
&lt;li>Works for both the client and the server&lt;/li>
&lt;li>Supports the full &amp;ndash;port and the shorthand -p&lt;/li>
&lt;li>Default port is 80&lt;/li>
&lt;/ul>
&lt;p>In &lt;em>get&lt;/em>.go_, declare a variable to be used as port number:&lt;/p>
&lt;pre>&lt;code class="language-go">var clientPort int
&lt;/code>&lt;/pre>
&lt;p>And add the port flag to the &lt;em>init()&lt;/em> function:&lt;/p>
&lt;pre>&lt;code class="language-go"> getCmd.Flags().IntVarP(&amp;amp;clientPort,&amp;quot;port&amp;quot;,&amp;quot;p&amp;quot;, 80, &amp;quot;port number&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>Do the same thing in &lt;em>serve.go&lt;/em>, but use serverPort as variable name.&lt;/p>
&lt;p>Rebuild and check the help output:&lt;/p>
&lt;pre>&lt;code class="language-bash">go build
./hello
./hello serve -h
./hello get -h
&lt;/code>&lt;/pre>
&lt;p>Let&amp;rsquo;s adjust the server so it uses the new port flag.
In the &lt;em>listen()&lt;/em> function in &lt;em>serve.go&lt;/em>, replace&lt;/p>
&lt;pre>&lt;code class="language-go"> err = http.ListenAndServe(&amp;quot;:80&amp;quot;, nil)
&lt;/code>&lt;/pre>
&lt;p>with&lt;/p>
&lt;pre>&lt;code class="language-go"> log.Printf(&amp;quot;Listening on port %d\n&amp;quot;, serverPort)
err = http.ListenAndServe(fmt.Sprintf(&amp;quot;:%d&amp;quot;, serverPort), nil)
&lt;/code>&lt;/pre>
&lt;p>Now for the client, in the &lt;em>get()&lt;/em> function in &lt;em>get.go&lt;/em>, replace&lt;/p>
&lt;pre>&lt;code class="language-go"> resp, err := http.Get(&amp;quot;http://localhost&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>with&lt;/p>
&lt;pre>&lt;code class="language-go"> resp, err := http.Get(fmt.Sprintf(&amp;quot;http://localhost:%d&amp;quot;, clientPort))
&lt;/code>&lt;/pre>
&lt;p>Rebuild and start the server:&lt;/p>
&lt;pre>&lt;code class="language-bash">go build
./hello serve -p 10080
&lt;/code>&lt;/pre>
&lt;p>The server will now be available on &lt;a href="http://localhost:10080" target="_blank" rel="noopener">http://localhost:10080&lt;/a>&lt;/p>
&lt;p>Then from another console window:&lt;/p>
&lt;pre>&lt;code class="language-bash">./hello get -p 10080
&lt;/code>&lt;/pre>
&lt;p>You should see something similar to:
Then from another console window:&lt;/p>
&lt;pre>&lt;code class="language-plaintext">Go Hello 1 from my-mac.home on GET ./
&lt;/code>&lt;/pre>
&lt;h3 id="the-code">The code&lt;/h3>
&lt;p>The code of my simple Hello Server is available on GitHub &lt;a href="https://github.com/akleinloog/hello" target="_blank" rel="noopener">here&lt;/a>.
I may add a few features there since I intend to use it for some Kubernetes experiments.
Another similar example is my simple &lt;a href="https://www.kleinloog.ch/project/http-logger">HTTP Logger&lt;/a>.&lt;/p></description></item><item><title>HTTP Logger</title><link>https://www.kleinloog.ch/project/http-logger/</link><pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate><guid>https://www.kleinloog.ch/project/http-logger/</guid><description>&lt;p>This goal of this project is to create a simple HTTP Logger in Go, that logs all incoming HTTP requests in a structured way.&lt;/p>
&lt;h2 id="the-what">The What&lt;/h2>
&lt;p>A Simple HTTP Logger that can be configured to run on any port.&lt;/p>
&lt;p>My main requirements:&lt;/p>
&lt;ul>
&lt;li>Log HTTP GET, POST, PUT and other methods to stdout&lt;/li>
&lt;li>Always return 200 OK as response&lt;/li>
&lt;li>Structured logging in JSON format&lt;/li>
&lt;li>Log Host, URL, Method, IP addresses, request body and more&lt;/li>
&lt;li>Containerized, lightweight, easily usable in different environments&lt;/li>
&lt;/ul>
&lt;p>Additional nice to haves:&lt;/p>
&lt;ul>
&lt;li>Enforce SSL with redirect and correct certificates&lt;/li>
&lt;li>Easy configuration (flags, environment settings, config files)&lt;/li>
&lt;li>Easy way to access request body&lt;/li>
&lt;/ul>
&lt;h2 id="the-why">The Why&lt;/h2>
&lt;p>The HTTP Logger can be used to gain some insights into HTTP traffic, for example, when you want to test if a webhook is properly sending messages, and what the content of these messages is.&lt;/p>
&lt;p>In addition, it is a perfectly small Microservice, ideally suited to learn some Go development practices that could be suited for other Microservices too.&lt;/p>
&lt;h2 id="the-how">The How&lt;/h2>
&lt;p>The HTTP Logger will be implemented using Go, a language that I am not yet familiar with, but really want to learn.
And for me, the best way to learn after some basic tutorials is to put things into practice.&lt;/p>
&lt;p>In order to learn a bit more about Go, I will pay attention to:&lt;/p>
&lt;ul>
&lt;li>Structured Logging (stdout in JSON)&lt;/li>
&lt;li>Flexible Configuration (Support for Flags, Environment, Config file, etx)&lt;/li>
&lt;li>Proper CLI support&lt;/li>
&lt;/ul>
&lt;h2 id="the-results">The Results&lt;/h2>
&lt;p>I just started this project, so there are no results to share just yet.
I will detail the progress in a series of blog posts and update this section when the HTTP Logger is available.&lt;/p>
&lt;p>In the end, my solution will be publicly available on GitHub and on Docker, for you to use freely, to learn from, and hopefully, to provide some feedback on!&lt;/p></description></item></channel></rss>